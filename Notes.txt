Javascript in the Browser: DOM Manipulation and Events

1. Section Intro
Our first small Project

2. Download Code

3. The DOM and Dom Manipulation
    The technical term for making a webpage interact with the javascript is called DOM Manipulation.

    DOM - Document Object Model
    It is a structured representation of an HTML document.
    That is used to connect webpages to scripts or programming languages such as Javascript.

    The DOM is a fully object oriented representation.
    So, for each of the boxes(HTML elements), there is an object in the DOM, that we can access and interact right from our JS code.

    Javascript and DOM are TWO DIFFERENT things. 
    
    So, the HTML webpage content is stored in the DOM. Which can then be accessed and manipulated by a Javascript.

    We're now gonna use some methods, which are functions attached to some object, and the object is the DOM or the Document Object. this is the object that gives us access to the DOM.

4. 5-minute HTML and CSS Crash Course

    'class' attribute allows us to give elements a certain name. A class name can be used over and over again throughout the pages.

    'Id' also allows us to assign names to elements, but an 'Id' HAS to be UNIQUE. Unlike class.

    HTML is the content of the web page, and the CSS is the presentation of the web page.
    -> We connect with the HTML by using usually CLASS NAMES
    -> We can also use ID's or other selectors, but the most common one is the class selector.
    -> There is something called a 'type' selector like 'body' which selects all the elements with a type of 'body'.
    -> There is also the Universal Selector - '*'. which simply selects all of the elements on the web page and applies these styles to all of them.


5.  Project Setup and Details

    /*
    GAME RULES: The Pig Game

    - The game has 2 players, playing in rounds
    - In each turn, a player rolls a dice as many times as he whishes. Each result get added to his ROUND score
    - BUT, if the player rolls a 1, all his ROUND score gets lost. After that, it's the next player's turn
    - The player can choose to 'Hold', which means that his ROUND score gets added to his GLBAL score. After that, it's the next player's turn
    - The first player to reach 100 points on GLOBAL score wins the game

    */

6. First DOM Access and Manipulation
    (We update the roundScore here from the value of the dice in one throw)

    #Note: '#' is the id selector from CSS


    var scores, roundScore, activePlayer, dice;

    scores = [0, 0];
    roundScore = 0;
    activePlayer = 0;

    dice = Math.floor(Math.random() * 6) + 1; 
    //Math.floor rounds off to nearest integer. 4.6586 -> 4
    console.log(dice);

    //document.querySelector('#current-0').textContent = dice; 
    document.querySelector('#current-' + activePlayer).textContent = dice;  // this is a setter
    //lets us select stuff exactly how we do in CSS. Diff. is that it only selects the first element that it finds.
    // textContent let's us change the text of that particular element
    //document.querySelector('#current-' + activePlayer).innerHTML = '<em>' + dice + '</em>'; //we used html tags inside single quotes as string cause if no string, then parser will think it's some JS code and throw an error cause the syntax would not match
    //this part is used to use some html syntax/tags without them showing up in the browser as strings
    //Hint: replace innerHTML with textContent and see what happens

    //To read data using the querySelector, instead of updating:
    //var x = document.querySelector('#score-0').textContent; // this is a getter
    //console.log(x);


    // to change the css of an element using the querySelector
    document.querySelector('.dice').style.display = 'none'; //.dice cause it's a class this time instead of an id
    //display is the css property and 'none' is the value attributed to this property


7. Events and Event Handling Rolling the Dice 

    Events: Notifications that are sent to notify the code that something happpened on the webpage.
    
    Examples: clicking a button, resizing a window, scrolling down or pressing a key.

    Event Listeners: A function that performs an action based on a certain event. It waits for a specific event to happen.

    Message Queue: This is where all the events that happen in the browser are put. And they sit there waiting to be processed. Which happens only once the Execution Stack is empty.

    That event listener is now called. And since it's a function, it gets its own Execution Context. Which is then put on top of the Execution Stack and becomes the active Execution Context.

    What we will learn:
    * How to set up an event handler
    * What a callback function is
    * What an anonymous function is
    * Another way to select elements by it 
    * How to chage the image in an <img> element 

    # Let's now set up our event handler:
      * First step is to select the element in which the event will happen.
      In this case, it will be the button that will roll the dice(roll dice).

    #Callback function: The function that we pass into another function as an argument. And this function (EventListener in this case), will then call that function for us.

    What if we didn't want to have an external function that gets called by the Event Listener?
    
    We could simply add the function right here, instead of having the function name here:

    document.querySelector('.btn-roll').addEventListener('click', function() {
        // function code goes here
        // Do something here
    } ); // Like this. 


    That would be an #anonymous function. 

    An Anonymous function is simply a function that doesn't have a name. So, it cannnot be reused. 

    We have to keep selecting the 'dice' over and over again. 
    So, we're going to store this selection in a variable and use this variable whenever needed.

    var scores, roundScore, activePlayer;

    scores = [0, 0];
    roundScore = 0;
    activePlayer = 0;

    //var dice = Math.floor(Math.random() * 6) + 1; 
    //console.log(dice);

    //document.querySelector('#current-' + activePlayer).textContent = dice;

    document.querySelector('.dice').style.display = 'none';

    document.getElementById('score-0').textContent = '0';
    document.getElementById('score-1').textContent = '0';
    document.getElementById('player-0').textContent = '0';
    document.getElementById('player-1').textContent = '0';

    //function btn() {
    //    // Do something here
    //}
    //btn();

    //document.querySelector('.btn-roll').addEventListener('click', btn); //#Note that there is no () after btn as we don't want to call the function,
    //#We want the event listener to call the function for us
    //'btn' function is called the 'callback' function
    //as it's a function not called by us, but by another function

    //addEventListener takes two arguments: 
    //1. Event Type, 2. function that will be called as soon as that event happens

    //But we will use anonymous function to do this:
    document.querySelector('.btn-roll').addEventListener('click', function() {

        // 1. Random Number
        var dice = Math.floor(Math.random() * 6) + 1; // moved here as we only need this when clicked 
        //we don't need this right after our application loads

        // 2. Display the result
        //document.querySelector('.dice')document.querySelector('.dice').style.display = 'block';
        // we had set .display to 'none' to hide the dice. //'block' brings it back
        //We have to keep selecting the 'dice' over and over again. 
        //So, we're going to store this selection in a variable and use this variable whenever needed. 
        var diceDOM = document.querySelector('.dice');
        diceDOM.style.display = 'block'; //modified querySelector code
        diceDOM.src = 'dice-' + dice + '.png';

        // 3. Update the round score if the rolled no. was not a '1'

    });

    // to set the player 1 and 2 score , and round score to 0, we could use the document.querySelector and use current-1,0 and score-1,0 id's.
    //or there's another method; Using 'document.getElementById'.
    //this only works for id's, but is FASTER than 'querySelector'.


8. Updating Scores and Changing the Active Player 
    var scores, roundScore, activePlayer;

    scores = [0, 0];
    roundScore = 0;
    activePlayer = 0;


    //document.querySelector('#current-' + activePlayer).textContent = dice;

    document.querySelector('.dice').style.display = 'none';

    document.getElementById('score-0').textContent = '0';
    document.getElementById('score-1').textContent = '0';
    document.getElementById('current-0').textContent = '0';
    document.getElementById('current-1').textContent = '0';


    document.querySelector('.btn-roll').addEventListener('click', function() {

        // 1. Random Number
        var dice = Math.floor(Math.random() * 6) + 1; // moved here as we only need this when clicked 
        //we don't need this right after our application loads

        // 2. Display the result
        //document.querySelector('.dice')document.querySelector('.dice').style.display = 'block';
        // we had set .display to 'none' to hide the dice. //'block' brings it back
        //We have to keep selecting the 'dice' over and over again. 
        //So, we're going to store this selection in a variable and use this variable whenever needed. 
        var diceDOM = document.querySelector('.dice');
        diceDOM.style.display = 'block'; //modified querySelector code
        diceDOM.src = 'dice-' + dice + '.png';

        // 3. Update the round score if the rolled no. was not a '1'
        if(dice !== 1) {
            //Add score
            roundScore += dice;
            document.querySelector('#current-' + activePlayer).textContent = roundScore;
        } else {
            //Next player
            activePlayer === 0 ? activePlayer = 1 : activePlayer = 0;
            roundScore = 0;

            document.getElementById('current-0').textContent = '0';
            document.getElementById('current-1').textContent = '0';

            //document.querySelector('.player-0-panel').classList.remove('active');
            //document.querySelector('.player-1-panel').classList.add('active');

            document.querySelector('.player-0-panel').classList.toggle('active');
            document.querySelector('.player-1-panel').classList.toggle('active');

            document.querySelector('.dice').style.display = 'none';


        }

    });

    Note: '#' for selecting id and '.' for selecting class.


9. Implementing our 'HOLD' Function and the DRY Principle

    * How to use functions to correctly apply the DRY (don't repeat yourself) principle;
    * How to think about the game logic like a programmer;

    var scores, roundScore, activePlayer;

    scores = [0, 0];
    roundScore = 0;
    activePlayer = 0;


    //document.querySelector('#current-' + activePlayer).textContent = dice;

    document.querySelector('.dice').style.display = 'none';

    document.getElementById('score-0').textContent = '0';
    document.getElementById('score-1').textContent = '0';
    document.getElementById('current-0').textContent = '0';
    document.getElementById('current-1').textContent = '0';


    document.querySelector('.btn-roll').addEventListener('click', function() {

        // 1. Random Number
        var dice = Math.floor(Math.random() * 6) + 1; // moved here as we only need this when clicked 
        //we don't need this right after our application loads

        // 2. Display the result
        //document.querySelector('.dice')document.querySelector('.dice').style.display = 'block';
        // we had set .display to 'none' to hide the dice. //'block' brings it back
        //We have to keep selecting the 'dice' over and over again. 
        //So, we're going to store this selection in a variable and use this variable whenever needed. 
        var diceDOM = document.querySelector('.dice');
        diceDOM.style.display = 'block'; //modified querySelector code
        diceDOM.src = 'dice-' + dice + '.png'; //image

        // 3. Update the round score if the rolled no. was not a '1'
        if(dice !== 1) {
            //Add score
            roundScore += dice;
            document.querySelector('#current-' + activePlayer).textContent = roundScore;
        } else { //if dice = 1
            //Next player
            
            /*
            activePlayer === 0 ? activePlayer = 1 : activePlayer = 0;
            roundScore = 0;

            document.getElementById('current-0').textContent = '0';
            document.getElementById('current-1').textContent = '0';

            //document.querySelector('.player-0-panel').classList.remove('active');
            //document.querySelector('.player-1-panel').classList.add('active');

            document.querySelector('.player-0-panel').classList.toggle('active');
            document.querySelector('.player-1-panel').classList.toggle('active');

            document.querySelector('.dice').style.display = 'none';*/ 

            nextPlayer();


        }

    });

    document.querySelector('.btn-hold').addEventListener('click', function() {
        // 1. Addd the current score to the global score
        scores[activePlayer] += roundScore; 

        // 2. Update the UI 
        document.querySelector('#score-' + activePlayer).textContent = scores[activePlayer];

        // 3. Check if player won the game
        if (scores[activePlayer] >= 19) {
            document.querySelector('#name-' + activePlayer).textContent = 'Winner!';
            document.querySelector('.dice').style.display = 'none';
            document.querySelector('.player-' + activePlayer + '-panel').classList.add('winner');
            document.querySelector('.player-' + activePlayer + '-panel').classList.remove('active');


        } else {
            // 4. Next player
        
            /*
            activePlayer === 0 ? activePlayer = 1 : activePlayer = 0;
            roundScore = 0;

            document.getElementById('current-0').textContent = '0';
            document.getElementById('current-1').textContent = '0';

            //document.querySelector('.player-0-panel').classList.remove('active');
            //document.querySelector('.player-1-panel').classList.add('active');

            document.querySelector('.player-0-panel').classList.toggle('active');
            document.querySelector('.player-1-panel').classList.toggle('active');

            document.querySelector('.dice').style.display = 'none';
            */ 
            //commented as this code was being repeated from our if else block, above
            
            nextPlayer();
                
        }
            
    });

    function nextPlayer() {
        //Next player
        activePlayer === 0 ? activePlayer = 1 : activePlayer = 0;
        roundScore = 0;

        document.getElementById('current-0').textContent = '0';
        document.getElementById('current-1').textContent = '0';

        //document.querySelector('.player-0-panel').classList.remove('active');
        //document.querySelector('.player-1-panel').classList.add('active');

        document.querySelector('.player-0-panel').classList.toggle('active');
        document.querySelector('.player-1-panel').classList.toggle('active');

        document.querySelector('.dice').style.display = 'none';
    }


10. Creating a game Initialization Function 


var scores, roundScore, activePlayer;

//scores = [0, 0];
//roundScore = 0;
//activePlayer = 0;
init();


//document.querySelector('#current-' + activePlayer).textContent = dice;

/*document.querySelector('.dice').style.display = 'none';

document.getElementById('score-0').textContent = '0';
document.getElementById('score-1').textContent = '0';
document.getElementById('current-0').textContent = '0';
document.getElementById('current-1').textContent = '0';
*/

document.querySelector('.btn-roll').addEventListener('click', function() {

    // 1. Random Number
    var dice = Math.floor(Math.random() * 6) + 1; // moved here as we only need this when clicked 
    //we don't need this right after our application loads

    // 2. Display the result
    //document.querySelector('.dice')document.querySelector('.dice').style.display = 'block';
    // we had set .display to 'none' to hide the dice. //'block' brings it back
    //We have to keep selecting the 'dice' over and over again. 
    //So, we're going to store this selection in a variable and use this variable whenever needed. 
    var diceDOM = document.querySelector('.dice');
    diceDOM.style.display = 'block'; //modified querySelector code
    diceDOM.src = 'dice-' + dice + '.png'; //image

    // 3. Update the round score if the rolled no. was not a '1'
    if(dice !== 1) {
        //Add score
        roundScore += dice;
        document.querySelector('#current-' + activePlayer).textContent = roundScore;
    } else { //if dice = 1
        //Next player
        
        /*
        activePlayer === 0 ? activePlayer = 1 : activePlayer = 0;
        roundScore = 0;

        document.getElementById('current-0').textContent = '0';
        document.getElementById('current-1').textContent = '0';

        //document.querySelector('.player-0-panel').classList.remove('active');
        //document.querySelector('.player-1-panel').classList.add('active');

        document.querySelector('.player-0-panel').classList.toggle('active');
        document.querySelector('.player-1-panel').classList.toggle('active');

        document.querySelector('.dice').style.display = 'none';*/ 

        nextPlayer();


    }

});

document.querySelector('.btn-hold').addEventListener('click', function() {
    // 1. Addd the current score to the global score
    scores[activePlayer] += roundScore; 

    // 2. Update the UI 
    document.querySelector('#score-' + activePlayer).textContent = scores[activePlayer];

    // 3. Check if player won the game
    if (scores[activePlayer] >= 19) {
        document.querySelector('#name-' + activePlayer).textContent = 'Winner!';
        document.querySelector('.dice').style.display = 'none';
        document.querySelector('.player-' + activePlayer + '-panel').classList.add('winner');
        document.querySelector('.player-' + activePlayer + '-panel').classList.remove('active');


    } else {
        // 4. Next player
    
        /*
        activePlayer === 0 ? activePlayer = 1 : activePlayer = 0;
        roundScore = 0;

        document.getElementById('current-0').textContent = '0';
        document.getElementById('current-1').textContent = '0';

        //document.querySelector('.player-0-panel').classList.remove('active');
        //document.querySelector('.player-1-panel').classList.add('active');

        document.querySelector('.player-0-panel').classList.toggle('active');
        document.querySelector('.player-1-panel').classList.toggle('active');

        document.querySelector('.dice').style.display = 'none';
        */ 
        //commented as this code was being repeated from our if else block, above
        
        nextPlayer();
            
    }
        
});

function nextPlayer() {
    //Next player
    activePlayer === 0 ? activePlayer = 1 : activePlayer = 0;
    roundScore = 0;

    document.getElementById('current-0').textContent = '0';
    document.getElementById('current-1').textContent = '0';

    //document.querySelector('.player-0-panel').classList.remove('active');
    //document.querySelector('.player-1-panel').classList.add('active');

    document.querySelector('.player-0-panel').classList.toggle('active');
    document.querySelector('.player-1-panel').classList.toggle('active');

    document.querySelector('.dice').style.display = 'none';
}

/*document.querySelector('.btn-new').addEventListener('click', function() {
    //scores = [0,0];
    //activePlayer = 0;
    //roundScore = 0;
    init(); // does what above 3 lines of code do;

});*/ // or we could do what's in the lines below

document.querySelector('.btn-new').addEventListener('click', init); //no parentheses after 'init' as we're not calling the function here. we want our eventListener to call it on the click event

function init() {
    scores = [0, 0];
    roundScore = 0;
    activePlayer = 0;

    document.querySelector('.dice').style.display = 'none';

    document.getElementById('score-0').textContent = '0';
    document.getElementById('score-1').textContent = '0';
    document.getElementById('current-0').textContent = '0';
    document.getElementById('current-1').textContent = '0';

    document.querySelector('#name-0').textContent = 'Player 1';
    document.querySelector('#name-1').textContent = 'Player 2';

    //or 
    //document.getElementById('name-0').textContent = 'Player 1';
    //document.getElementById('name-1').textContent = 'Player 2'; // # is for querySelector for selecting id's

    document.querySelector('.player-0-panel').classList.remove('winner');
    document.querySelector('.player-1-panel').classList.remove('winner');

    document.querySelector('.player-0-panel').classList.remove('active');
    document.querySelector('.player-1-panel').classList.remove('active');

    document.querySelector('.player-0-panel').classList.add('active');

}


11. Finishing Touches State Variables 

    * #What a 'state' variable is, how to use it and why;

    What is a state variable?
    A state variable simply tells us the condition of a system.
    We need a state variable when we need to remember something. 
    
